{"version":3,"sources":["measure.js"],"names":[],"mappingsfile":"measure.js","sourcesContent":["var measureTools = {};\nmeasureTools.sketch;\nmeasureTools.helpTooltipElement;\nmeasureTools.helpTooltip;\nmeasureTools.measureTooltipElement;\nmeasureTools.measureTooltip;\nmeasureTools.continuePolygonMsg = 'Click to continue drawing the polygon';      \nmeasureTools.continueLineMsg = 'Click to continue drawing the line';\nmeasureTools.draw; // global so we can remove it later\nmeasureTools.typeSelect = document.getElementById('type');\nmeasureTools.map = window.map;\n\nfunction pointerMoveHandler(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  /** @type {string} */\n  var helpMsg = 'Click to start drawing';\n\n  if (measureTools.sketch) {\n    var geom = (measureTools.sketch.getGeometry());\n    if (geom instanceof ol.geom.Polygon) {\n      helpMsg = measureTools.continuePolygonMsg;\n    } else if (geom instanceof ol.geom.LineString) {\n      helpMsg = measureTools.continueLineMsg;\n    }\n  }\n\n  measureTools.helpTooltipElement.innerHTML = helpMsg;\n  measureTools.helpTooltip.setPosition(evt.coordinate);\n\n  measureTools.helpTooltipElement.classList.remove('hidden');\n}\nfunction formatLength(line) {\n  var length = ol.Sphere.getLength(line);\n  var output;\n  if (length > 100) {\n    output = (Math.round(length / 1000 * 100) / 100) +\n        ' ' + 'km';\n  } else {\n    output = (Math.round(length * 100) / 100) +\n        ' ' + 'm';\n  }\n  return output;\n}\nfunction formatArea(polygon) {\n  var area = ol.Sphere.getArea(polygon);\n  var output;\n  if (area > 10000) {\n    output = (Math.round(area / 1000000 * 100) / 100) +\n        ' ' + 'km<sup>2</sup>';\n  } else {\n    output = (Math.round(area * 100) / 100) +\n        ' ' + 'm<sup>2</sup>';\n  }\n  return output;\n}\nfunction createHelpTooltip() {\n  if (measureTools.helpTooltipElement) {\n    measureTools.helpTooltipElement.parentNode.removeChild(measureTools.helpTooltipElement);\n  }\n  measureTools.helpTooltipElement = document.createElement('div');\n  measureTools.helpTooltipElement.className = 'tooltip hidden';\n  measureTools.helpTooltip = new ol.Overlay({\n    element: measureTools.helpTooltipElement,\n    offset: [15, 0],\n    positioning: 'center-left'\n  });\n  map.addOverlay(measureTools.helpTooltip);\n}\nfunction createMeasureTooltip() {\n  if (measureTools.measureTooltipElement) {\n    measureTools.measureTooltipElement.parentNode.removeChild(measureTools.measureTooltipElement);\n  }\n  measureTools.measureTooltipElement = document.createElement('div');\n  measureTools.measureTooltipElement.className = 'tooltip tooltip-measure';\n  measureTools.measureTooltip = new ol.Overlay({\n    element: measureTools.measureTooltipElement,\n    offset: [0, -15],\n    positioning: 'bottom-center'\n  });\n  map.addOverlay(measureTools.measureTooltip);\n}\nfunction addInteraction() {\n  var type = (measureTools.typeSelect.value == 'area' ? 'Polygon' : 'LineString');\n  measureTools.draw = new ol.interaction.Draw({\n    source: findBy(map.getLayerGroup(), 'id', 'lyr_vector').getSource(),\n    type: (type),\n    style: new ol.style.Style({\n      fill: new ol.style.Fill({\n        color: 'rgba(255, 255, 255, 0.2)'\n      }),\n      stroke: new ol.style.Stroke({\n        color: 'rgba(0, 0, 0, 0.5)',\n        lineDash: [10, 10],\n        width: 2\n      }),\n      image: new ol.style.Circle({\n        radius: 5,\n        stroke: new ol.style.Stroke({\n          color: 'rgba(0, 0, 0, 0.7)'\n        }),\n        fill: new ol.style.Fill({\n          color: 'rgba(255, 255, 255, 0.2)'\n        })\n      })\n    })\n  });  \n  map.addInteraction(measureTools.draw);\n\n  createMeasureTooltip();\n  createHelpTooltip();\n\n  var listener;\n  measureTools.draw.on('drawstart',\n      function(evt) {\n        // set sketch\n        measureTools.sketch = evt.feature;\n\n        var tooltipCoord = evt.coordinate;\n\n        listener = measureTools.sketch.getGeometry().on('change', function(evt) {\n          var geom = evt.target;\n          var output;\n          if (geom instanceof ol.geom.Polygon) {\n            output = formatArea(geom);\n            measureTools.tooltipCoord = geom.getInteriorPoint().getCoordinates();\n          } else if (geom instanceof ol.geom.LineString) {\n            output = formatLength(geom);\n            measureTools.tooltipCoord = geom.getLastCoordinate();\n          }\n          measureTools.measureTooltipElement.innerHTML = output;\n          measureTools.measureTooltip.setPosition(measureTools.tooltipCoord);\n        });\n      }, this);\n\n      measureTools.draw.on('drawend',\n      function() {\n        measureTools.measureTooltipElement.className = 'tooltip tooltip-static';\n        measureTools.measureTooltip.setOffset([0, -7]);\n        // unset sketch\n        measureTools.sketch = null;\n        // unset tooltip so that a new one can be created\n        measureTools.measureTooltipElement = null;\n        createMeasureTooltip();\n        ol.Observable.unByKey(listener);\n      }, this);\n}\nfunction initMeasure(){\n  map.on('pointermove', pointerMoveHandler);\n  map.getViewport().addEventListener('mouseout', function() {\n    measureTools.helpTooltipElement.classList.add('hidden');\n  });\n  measureTools.typeSelect.onchange = function() {\n    map.removeInteraction(measureTools.draw);\n    addInteraction();\n  };\n  addInteraction();\n}"]}